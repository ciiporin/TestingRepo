package SpaceInvaders;

    import java.awt.Canvas;
    import java.awt.Color;
    import java.awt.Container;
    import java.awt.Dimension;
    import java.awt.Graphics2D;
    import java.awt.Rectangle;
    import java.awt.event.KeyEvent;
    import java.awt.event.KeyListener;
    import java.awt.event.WindowAdapter;
    import java.awt.event.WindowEvent;
    import java.awt.image.BufferStrategy;
    import java.util.ArrayList;
    import javax.swing.JFrame;
    import javax.swing.JPanel;


public class SpaceInvaders extends Canvas implements Stage, KeyListener { 

	
	private static final long SPEED = 0;
	private BufferStrategy strategy;
    private long usedTime;
    
    private SpriteCache spriteCache;
    private ArrayList <Actor> actors; 
    private Player player;
	private boolean ingame;
	private int monsterX = 150;
	

    
    public SpaceInvaders() {
      spriteCache = new SpriteCache();
      
    
      JFrame ventana = new JFrame("Space Invaders");
      JPanel panel = (JPanel)ventana.getContentPane();
      setBounds(0,0,Stage.WIDTH,Stage.HEIGHT);
      panel.setPreferredSize(new Dimension(Stage.WIDTH,Stage.HEIGHT));
      panel.setLayout(null);
      panel.add(this);
      ventana.setBounds(0,0,Stage.WIDTH,Stage.HEIGHT);
      ventana.setVisible(true);
      ventana.addWindowListener( new WindowAdapter() {
        public void windowClosing(WindowEvent e) {
          System.exit(0);
        }
      });
      ventana.setResizable(false);
      createBufferStrategy(2);
      strategy = getBufferStrategy();
      requestFocus();
      addKeyListener(this);
      setBackground(Color.BLACK);
    }
   
     private void initWorld() {
      actors = new ArrayList <Actor>();
      for (int row=0; row<5;row++){
      for (int i = 0; i < 12; i++){
         Monster m = new Monster(monsterX+(i+50), (monsterX)+row+30);
          monsterX++;
          
          
          
         int MONSTER_X =( (int)(Math.random()*Stage.WIDTH) );
         int MONSTER_Y =( i*20 );
         int MONSTER_VX =( (int)(Math.random()*20-10) );
      

   
          actors.add(m);
     }
     }
      player = new Player();
      player.setX(Stage.WIDTH/2);
      player.setY(Stage.HEIGHT - 2*player.getHeight());
    }
    
  

     
    public void addActor(Actor a) {
  	       actors.add(a);
      } 

    public void updateWorld() {
  	         int i = 0;
  	         while (i < actors.size()) {
  	           Actor m = (Actor)actors.get(i);
  	            if (m.isMarkedForRemoval()) {
  	              actors.remove(i);
  	           } else {
  	              m.act();
  	              i++;
  	            }
  	          }
  	          player.act();
     }

    public void checkCollisions() {
  	         Rectangle playerBounds = player.getBounds();
  	        for (int i = 0; i < actors.size(); i++) {
  	           Actor a1 = (Actor)actors.get(i);
  	           Rectangle r1 = a1.getBounds();
  	           if (r1.intersects(playerBounds)) {
  	            player.collision(a1);
  	             a1.collision(player);
  	           }
  	           for (int j = i+1; j < actors.size(); j++) {
  	             Actor a2 = (Actor)actors.get(j);
  	             Rectangle r2 = a2.getBounds();
  	             if (r1.intersects(r2)) {
  	               a1.collision(a2);
  	               a2.collision(a1);
  	             }
  	           }
  	         }
  	      }

    
    public void paintWorld() {
      Graphics2D g = (Graphics2D)strategy.getDrawGraphics();
      g.setColor(Color.black);
      g.fillRect(0,0,getWidth(),getHeight());
      
      if (ingame) {
    	  drawPlayer(g);
    	  drawMonster(g);
    	 
      }
      
  
      
       for (int i = 0; i < actors.size(); i++) {
        //Actor m = (Actor)actors.get(i);
    	   Monster m = (Monster)actors.get(i);
    	   m.paint(g);
     }
      player.paint(g);
      //monster.paint(g);
  
      g.setColor(Color.white);
      if (usedTime > 0)
        g.drawString(String.valueOf(1000/usedTime)+" fps",0,Stage.HEIGHT-50);
     else
        g.drawString("--- fps",0,Stage.HEIGHT-50);
     strategy.show();
  }
   
 private void drawPlayer(Graphics2D g) {
		// TODO Auto-generated method stub
	 
		
	}

private void drawMonster(Graphics2D g) {
		// TODO Auto-generated method stub
	

	}


public SpriteCache getSpriteCache() {
     return spriteCache;
   }
   
   public void keyPressed(KeyEvent e) {
     player.keyPressed(e);
     
     //int x = player.getX();
    // int y = player.getY();
   }
   
   public void keyReleased(KeyEvent e) {
     player.keyReleased(e);
     
   }
   public void keyTyped(KeyEvent e) {}
   
   public void game() {
     usedTime=1000;
     initWorld();
     while (isVisible()) {
       long startTime = System.currentTimeMillis();
      updateWorld();
       
       checkCollisions();

       paintWorld();
       usedTime = System.currentTimeMillis()-startTime;
       try { 
          Thread.sleep(SPEED);
       } catch (InterruptedException e) {}
     }
   }
   
   public static void main(String[] args) {
     SpaceInvaders inv = new SpaceInvaders();
     inv.game();
  }
}
